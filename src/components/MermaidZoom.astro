---
// MermaidZoom.astro - Component to add zoom and fullscreen functionality to Mermaid diagrams
---

<script>
  // Add zoom and pan functionality to Mermaid diagrams
  function initMermaidZoom() {
    // Find all Mermaid images (generated by rehype-mermaid with img-svg strategy)
    const mermaidImages = document.querySelectorAll('img[src*="data:image/svg+xml"], img[src*="data:image/xml+svg"]');
    
    mermaidImages.forEach((img, index) => {
      // Skip if already processed
      if (img.closest('.mermaid-container')) return;
      
      // Create container wrapper
      const container = document.createElement('div');
      container.className = 'mermaid-container';
      container.id = `mermaid-container-${index}`;
      
      // Create zoom controls
      const controls = document.createElement('div');
      controls.className = 'mermaid-zoom-controls';
      controls.innerHTML = `
        <button class="mermaid-zoom-btn" data-action="zoom-in" title="Zoom In">+</button>
        <button class="mermaid-zoom-btn" data-action="zoom-out" title="Zoom Out">−</button>
        <button class="mermaid-zoom-btn" data-action="reset" title="Reset Zoom">⌂</button>
        <button class="mermaid-zoom-btn" data-action="fullscreen" title="Fullscreen">⛶</button>
      `;
      
      // Wrap the image
      img.parentNode?.insertBefore(container, img);
      container.appendChild(img);
      container.appendChild(controls);
      
      // Initialize zoom state
      let scale = 1;
      let isDragging = false;
      let startX = 0;
      let startY = 0;
      let translateX = 0;
      let translateY = 0;
      
      // Apply transform
      function updateTransform() {
        (img as HTMLImageElement).style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
      }
      
      // Zoom functions
      function zoomIn() {
        scale = Math.min(scale * 1.2, 5);
        updateTransform();
      }
      
      function zoomOut() {
        scale = Math.max(scale / 1.2, 0.1);
        updateTransform();
      }
      
      function resetZoom() {
        scale = 1;
        translateX = 0;
        translateY = 0;
        updateTransform();
      }
      
      function openFullscreen() {
        // Create modal
        const modal = document.createElement('div');
        modal.className = 'mermaid-modal';
        modal.innerHTML = `
          <div class="mermaid-modal-content">
            <div class="mermaid-zoom-controls">
              <button class="mermaid-zoom-btn" data-action="zoom-in" title="Zoom In">+</button>
              <button class="mermaid-zoom-btn" data-action="zoom-out" title="Zoom Out">−</button>
              <button class="mermaid-zoom-btn" data-action="reset" title="Reset Zoom">⌂</button>
              <button class="mermaid-zoom-btn" data-action="close" title="Close">✕</button>
            </div>
            ${img.outerHTML}
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Initialize modal zoom
        const modalImg = modal.querySelector('img');
        const modalControls = modal.querySelector('.mermaid-zoom-controls');
        let modalScale = 1;
        let modalTranslateX = 0;
        let modalTranslateY = 0;
        
        function updateModalTransform() {
          (modalImg as HTMLImageElement).style.transform = `translate(${modalTranslateX}px, ${modalTranslateY}px) scale(${modalScale})`;
        }
        
        // Modal event listeners
        modalControls?.addEventListener('click', (e) => {
          const action = (e.target as HTMLElement)?.dataset?.action;
          switch (action) {
            case 'zoom-in':
              modalScale = Math.min(modalScale * 1.2, 5);
              updateModalTransform();
              break;
            case 'zoom-out':
              modalScale = Math.max(modalScale / 1.2, 0.1);
              updateModalTransform();
              break;
            case 'reset':
              modalScale = 1;
              modalTranslateX = 0;
              modalTranslateY = 0;
              updateModalTransform();
              break;
            case 'close':
              document.body.removeChild(modal);
              break;
          }
        });
        
        // Close on background click
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            document.body.removeChild(modal);
          }
        });
        
        // Close on Escape key
        const handleEscape = (e: KeyboardEvent) => {
          if (e.key === 'Escape') {
            document.body.removeChild(modal);
            document.removeEventListener('keydown', handleEscape);
          }
        };
        document.addEventListener('keydown', handleEscape);
        
        // Add drag functionality to modal
        let modalIsDragging = false;
        let modalStartX = 0;
        let modalStartY = 0;
        
        modalImg?.addEventListener('mousedown', (e) => {
          modalIsDragging = true;
          modalStartX = e.clientX - modalTranslateX;
          modalStartY = e.clientY - modalTranslateY;
          e.preventDefault();
        });
        
        document.addEventListener('mousemove', (e: MouseEvent) => {
          if (modalIsDragging) {
            modalTranslateX = e.clientX - modalStartX;
            modalTranslateY = e.clientY - modalStartY;
            updateModalTransform();
          }
        });
        
        document.addEventListener('mouseup', () => {
          modalIsDragging = false;
        });
      }
      
      // Event listeners for controls
      controls.addEventListener('click', (e) => {
        const action = (e.target as HTMLElement)?.dataset?.action;
        switch (action) {
          case 'zoom-in':
            zoomIn();
            break;
          case 'zoom-out':
            zoomOut();
            break;
          case 'reset':
            resetZoom();
            break;
          case 'fullscreen':
            openFullscreen();
            break;
        }
      });
      
      // Mouse wheel zoom
      container.addEventListener('wheel', (e) => {
        e.preventDefault();
        if (e.deltaY < 0) {
          zoomIn();
        } else {
          zoomOut();
        }
      });
      
      // Drag functionality
      img.addEventListener('mousedown', ((e: MouseEvent) => {
        isDragging = true;
        startX = e.clientX - translateX;
        startY = e.clientY - translateY;
        e.preventDefault();
      }) as EventListener);
      
      document.addEventListener('mousemove', (e: MouseEvent) => {
        if (isDragging) {
          translateX = e.clientX - startX;
          translateY = e.clientY - startY;
          updateTransform();
        }
      });
      
      document.addEventListener('mouseup', () => {
        isDragging = false;
      });
      
      // Touch support for mobile
      let initialDistance = 0;
      let initialScale = 1;
      
      container.addEventListener('touchstart', (e) => {
        if (e.touches.length === 2) {
          const touch1 = e.touches[0];
          const touch2 = e.touches[1];
          initialDistance = Math.hypot(
            touch2.clientX - touch1.clientX,
            touch2.clientY - touch1.clientY
          );
          initialScale = scale;
        }
      });
      
      container.addEventListener('touchmove', (e) => {
        if (e.touches.length === 2) {
          e.preventDefault();
          const touch1 = e.touches[0];
          const touch2 = e.touches[1];
          const distance = Math.hypot(
            touch2.clientX - touch1.clientX,
            touch2.clientY - touch1.clientY
          );
          scale = Math.max(0.1, Math.min(5, initialScale * (distance / initialDistance)));
          updateTransform();
        }
      });
    });
  }
  
  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMermaidZoom);
  } else {
    initMermaidZoom();
  }
  
  // Re-initialize when navigating (for SPA-like behavior)
  document.addEventListener('astro:page-load', initMermaidZoom);
</script>

<style>
  /* Additional styles for better UX */
  .mermaid-container {
    user-select: none;
  }
  
  .mermaid-zoom-btn:hover {
    transform: scale(1.05);
  }
  
  .mermaid-modal {
    animation: fadeIn 0.2s ease;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style>